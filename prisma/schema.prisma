generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

model User {
  id                    Int             @id @default(autoincrement())
  username              String          @unique @db.VarChar(255)
  password              String          @db.VarChar(255)
  status                String          @default("A") @db.VarChar(50)
  employee_code         String?         @db.VarChar(255)
  employeeId            Int?
  employee              Employee?       @relation(fields: [employeeId], references: [id])
  rankId                Int?
  rank                  Rank?           @relation(fields: [rankId], references: [id])
  roleId                Int?
  role                  Role?           @relation(fields: [roleId], references: [id])
  createdAt             DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt             DateTime        @updatedAt @db.Timestamptz(0)
  createdById           Int?
  createdBy             User?           @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers          User[]          @relation("UserCreatedBy")
  DocExternalCreator    DocExternal[]   @relation("creatorRelation")
  DocexTrackingAssigner DocexTracking[] @relation("AssignerRelation")
  DocexTrackingReceiver DocexTracking[] @relation("ReceiverRelation")
  DocexLogAssigner      DocexLog[]      @relation("AssignerRelation")
  DocexLogReceiver      DocexLog[]      @relation("ReceiverRelation")
  DocInternalCreator    DocInternal[]   @relation("creatorRelation")
  DocinTrackingAssigner DocinTracking[] @relation("AssignerRelation")
  DocinTrackingReceiver DocinTracking[] @relation("ReceiverRelation")
  DocinLogAssigner      DocinLog[]      @relation("AssignerRelation")
  DocinLogReceiver      DocinLog[]      @relation("ReceiverRelation")
  DocDirectorCreator    DocDirector[]   @relation("creatorRelation")
  DocdtTrackingAssigner DocdtTracking[] @relation("AssignerRelation")
  DocdtTrackingReceiver DocdtTracking[] @relation("ReceiverRelation")
  DocdtLogAssigner      DocdtLog[]      @relation("AssignerRelation")
  DocdtLogReceiver      DocdtLog[]      @relation("ReceiverRelation")
}

model Employee {
  id           Int         @id @default(autoincrement())
  first_name   String      @db.VarChar(255)
  last_name    String      @db.VarChar(255)
  emp_code     String      @unique @db.VarChar(255)
  status       String      @default("A") @db.VarChar(50)
  gender       Gender
  tel          String?     @db.VarChar(255)
  email        String?     @db.VarChar(255)
  empimg       String?     @db.VarChar(255)
  posId        Int?
  position     Position?   @relation(fields: [posId], references: [id])
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  divisionId   Int?
  division     Division?   @relation(fields: [divisionId], references: [id])
  officeId     Int?
  office       Office?     @relation(fields: [officeId], references: [id])
  unitId       Int?
  unit         Unit?       @relation(fields: [unitId], references: [id])
  createdAt    DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime    @updatedAt @db.Timestamptz(0)
  user         User[]
}

model Rank {
  id        Int        @id @default(autoincrement())
  rank_name String     @db.VarChar(255)
  users     User[]
  docexlogs DocexLog[]
  docinlogs DocinLog[]
  docdtlogs DocdtLog[]
}

model Role {
  id               Int        @id @default(autoincrement())
  role_name        String     @db.VarChar(255)
  role_code        String?    @db.VarChar(50)
  role_description String?    @db.Text
  authrole         String?    @db.VarChar(255)
  users            User[]
  docexlogs        DocexLog[]
  docinlogs        DocinLog[]
  docdtlogs        DocdtLog[]
  rolemenus        RoleMenu[]
}

model RoleMenu {
  id          Int          @id @default(autoincrement())
  roleId      Int
  role        Role         @relation(fields: [roleId], references: [id])
  title       String?      @db.VarChar(255)
  path        String?      @db.VarChar(255)
  permissions Permission[]
}

model Permission {
  id         Int      @id @default(autoincrement())
  rolemenuId Int
  rolemenu   RoleMenu @relation(fields: [rolemenuId], references: [id])
  C          Boolean  @default(false)
  R          Boolean  @default(false)
  U          Boolean  @default(false)
  D          Boolean  @default(false)
}

model Department {
  id                Int        @id @default(autoincrement())
  department_name   String?    @db.VarChar(255)
  department_code   String?    @db.VarChar(50)
  department_status String     @default("A") @db.VarChar(50)
  divisions         Division[]
  employees         Employee[]
  docexlogs         DocexLog[]
  docinlogs         DocinLog[]
  docdtlogs         DocdtLog[]
}

model Division {
  id              Int        @id @default(autoincrement())
  division_name   String?    @db.VarChar(255)
  division_code   String?    @db.VarChar(50)
  division_status String     @default("A") @db.VarChar(50)
  branch_id       Int?
  departmentId    Int
  department      Department @relation(fields: [departmentId], references: [id])
  offices         Office[]
  units           Unit[]
  employees       Employee[]
  docexlogs       DocexLog[]
  docinlogs       DocinLog[]
  docdtlogs       DocdtLog[]
}

model Office {
  id            Int        @id @default(autoincrement())
  office_name   String?    @db.VarChar(255)
  office_code   String?    @db.VarChar(50)
  office_status String     @default("A") @db.VarChar(50)
  divisionId    Int
  division      Division   @relation(fields: [divisionId], references: [id])
  units         Unit[]
  employees     Employee[]
  docexlogs     DocexLog[]
  docinlogs     DocinLog[]
  docdtlogs     DocdtLog[]
}

model Unit {
  id          Int        @id @default(autoincrement())
  unit_name   String?    @db.VarChar(255)
  unit_code   String?    @db.VarChar(50)
  unit_status String     @default("A") @db.VarChar(50)
  unit_type   String?    @db.VarChar(50)
  divisionId  Int?
  division    Division?  @relation(fields: [divisionId], references: [id])
  officeId    Int?
  office      Office?    @relation(fields: [officeId], references: [id])
  employees   Employee[]
  docexlogs   DocexLog[]
  docinlogs   DocinLog[]
  docdtlogs   DocdtLog[]
}

model PositionGroup {
  id             Int            @id @default(autoincrement())
  pos_group_name String         @db.VarChar(255)
  positioncodes  PositionCode[]
}

model PositionCode {
  id              Int           @id @default(autoincrement())
  pos_code_name   String        @db.VarChar(255)
  pos_code_status String        @default("A") @db.VarChar(50)
  posgroupId      Int
  positiongroup   PositionGroup @relation(fields: [posgroupId], references: [id])
  positions       Position[]
}

model Position {
  id           Int          @id @default(autoincrement())
  pos_name     String       @db.VarChar(255)
  pos_status   String       @default("A") @db.VarChar(50)
  poscodeId    Int
  positioncode PositionCode @relation(fields: [poscodeId], references: [id])
  employees    Employee[]
  docexlogs    DocexLog[]
  docinlogs    DocinLog[]
  docdtlogs    DocdtLog[]
}

model DocExternal {
  id                 Int             @id @default(autoincrement())
  docex_no           String          @db.VarChar(255)
  docex_date         DateTime?
  docex_title        String          @db.VarChar(255)
  docex_description  String?         @db.Text
  docex_fileoriginal String?         @db.VarChar(255)
  docex_file         String          @db.VarChar(255)
  docex_filetype     String          @db.VarChar(50)
  docex_filesize     Int
  outsiderId         Int?
  outsider           Outsider?       @relation(fields: [outsiderId], references: [id])
  assignto           Int?
  creatorCode        String          @db.VarChar(255)
  creator            User            @relation(fields: [creatorCode], references: [username], name: "creatorRelation")
  priorityId         Int?
  priority           Priority?       @relation(fields: [priorityId], references: [id])
  doctypeId          Int?
  doctype            DocType?        @relation(fields: [doctypeId], references: [id])
  extype             Int?            @default(1)
  createdAt          DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime        @updatedAt @db.Timestamptz(0)
  docextrackings     DocexTracking[]
  docexlogs          DocexLog[]
}

model DocexTracking {
  id                Int         @id @default(autoincrement())
  docexId           Int
  docexternal       DocExternal @relation(fields: [docexId], references: [id])
  assignerCode      String?     @db.VarChar(255)
  assigner          User?       @relation(fields: [assignerCode], references: [username], name: "AssignerRelation")
  receiverCode      String?     @db.VarChar(255)
  receiver          User?       @relation(fields: [receiverCode], references: [username], name: "ReceiverRelation")
  docstatusId       Int?
  docstatus         DocStatus?  @relation(fields: [docstatusId], references: [id])
  dateline          DateTime?
  description       String?     @db.Text
  departmentactive  Int?
  divisionactive    Int?
  officeactive      Int?
  extype            Int?        @default(1)
  docexlog_original String?     @db.VarChar(255)
  docexlog_file     String?     @db.VarChar(255)
  docexlog_type     String?     @db.VarChar(255)
  docexlog_size     Int?
  createdAt         DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime    @updatedAt @db.Timestamptz(0)
}

model DocexLog {
  id                Int         @id @default(autoincrement())
  docexId           Int
  docexternal       DocExternal @relation(fields: [docexId], references: [id])
  assignerCode      String?     @db.VarChar(255)
  assigner          User?       @relation(fields: [assignerCode], references: [username], name: "AssignerRelation")
  receiverCode      String?     @db.VarChar(255)
  receiver          User?       @relation(fields: [receiverCode], references: [username], name: "ReceiverRelation")
  rankId            Int?
  rank              Rank?       @relation(fields: [rankId], references: [id])
  roleId            Int?
  role              Role?       @relation(fields: [roleId], references: [id])
  positionId        Int?
  position          Position?   @relation(fields: [positionId], references: [id])
  departmentId      Int?
  department        Department? @relation(fields: [departmentId], references: [id])
  divisionId        Int?
  division          Division?   @relation(fields: [divisionId], references: [id])
  officeId          Int?
  office            Office?     @relation(fields: [officeId], references: [id])
  unitId            Int?
  unit              Unit?       @relation(fields: [unitId], references: [id])
  docstatusId       Int?
  docstatus         DocStatus?  @relation(fields: [docstatusId], references: [id])
  dateline          DateTime?
  description       String?     @db.Text
  direction         String?     @db.VarChar(255)
  departmentactive  Int?
  divisionactive    Int?
  officeactive      Int?
  extype            Int?        @default(1)
  docexlog_original String?     @db.VarChar(255)
  docexlog_file     String?     @db.VarChar(255)
  docexlog_type     String?     @db.VarChar(255)
  docexlog_size     Int?
  createdAt         DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime    @updatedAt @db.Timestamptz(0)
}

model DocInternal {
  id                 Int             @id @default(autoincrement())
  docin_no           String          @db.VarChar(255)
  docin_date         DateTime?
  docin_title        String          @db.VarChar(255)
  docin_description  String?         @db.Text
  docin_fileoriginal String?         @db.VarChar(255)
  docin_file         String          @db.VarChar(255)
  docin_filetype     String          @db.VarChar(50)
  docin_filesize     Int
  assignto           Int?
  creatorCode        String          @db.VarChar(255)
  creator            User            @relation(fields: [creatorCode], references: [username], name: "creatorRelation")
  priorityId         Int?
  priority           Priority?       @relation(fields: [priorityId], references: [id])
  doctypeId          Int?
  doctype            DocType?        @relation(fields: [doctypeId], references: [id])
  createdAt          DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime        @updatedAt @db.Timestamptz(0)
  docintrackings     DocinTracking[]
  docinlogs          DocinLog[]
}

model DocinTracking {
  id                Int         @id @default(autoincrement())
  docinId           Int
  docinternal       DocInternal @relation(fields: [docinId], references: [id])
  assignerCode      String?     @db.VarChar(255)
  assigner          User?       @relation(fields: [assignerCode], references: [username], name: "AssignerRelation")
  receiverCode      String?     @db.VarChar(255)
  receiver          User?       @relation(fields: [receiverCode], references: [username], name: "ReceiverRelation")
  docstatusId       Int?
  docstatus         DocStatus?  @relation(fields: [docstatusId], references: [id])
  dateline          DateTime?
  description       String?     @db.Text
  docinlog_original String?     @db.VarChar(255)
  docinlog_file     String?     @db.VarChar(255)
  docinlog_type     String?     @db.VarChar(255)
  docinlog_size     Int?
  createdAt         DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime    @updatedAt @db.Timestamptz(0)
}

model DocinLog {
  id                Int         @id @default(autoincrement())
  docinId           Int
  docinternal       DocInternal @relation(fields: [docinId], references: [id])
  assignerCode      String?     @db.VarChar(255)
  assigner          User?       @relation(fields: [assignerCode], references: [username], name: "AssignerRelation")
  receiverCode      String?     @db.VarChar(255)
  receiver          User?       @relation(fields: [receiverCode], references: [username], name: "ReceiverRelation")
  rankId            Int?
  rank              Rank?       @relation(fields: [rankId], references: [id])
  roleId            Int?
  role              Role?       @relation(fields: [roleId], references: [id])
  positionId        Int?
  position          Position?   @relation(fields: [positionId], references: [id])
  departmentId      Int?
  department        Department? @relation(fields: [departmentId], references: [id])
  divisionId        Int?
  division          Division?   @relation(fields: [divisionId], references: [id])
  officeId          Int?
  office            Office?     @relation(fields: [officeId], references: [id])
  unitId            Int?
  unit              Unit?       @relation(fields: [unitId], references: [id])
  docstatusId       Int?
  docstatus         DocStatus?  @relation(fields: [docstatusId], references: [id])
  dateline          DateTime?
  description       String?     @db.Text
  direction         String?     @db.VarChar(255)
  docinlog_original String?     @db.VarChar(255)
  docinlog_file     String?     @db.VarChar(255)
  docinlog_type     String?     @db.VarChar(255)
  docinlog_size     Int?
  createdAt         DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime    @updatedAt @db.Timestamptz(0)
}

model DocDirector {
  id                 Int             @id @default(autoincrement())
  docdt_no           String          @db.VarChar(255)
  docdt_date         DateTime?
  docdt_title        String          @db.VarChar(255)
  docdt_description  String?         @db.Text
  docdt_fileoriginal String?         @db.VarChar(255)
  docdt_file         String          @db.VarChar(255)
  docdt_filetype     String          @db.VarChar(50)
  docdt_filesize     Int
  assignto           Int?
  creatorCode        String          @db.VarChar(255)
  creator            User            @relation(fields: [creatorCode], references: [username], name: "creatorRelation")
  priorityId         Int?
  priority           Priority?       @relation(fields: [priorityId], references: [id])
  doctypeId          Int?
  doctype            DocType?        @relation(fields: [doctypeId], references: [id])
  createdAt          DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime        @updatedAt @db.Timestamptz(0)
  docdttrackings     DocdtTracking[]
  docdtlogs          DocdtLog[]
}

model DocdtTracking {
  id                Int         @id @default(autoincrement())
  docdtId           Int
  docdirector       DocDirector @relation(fields: [docdtId], references: [id])
  assignerCode      String?     @db.VarChar(255)
  assigner          User?       @relation(fields: [assignerCode], references: [username], name: "AssignerRelation")
  receiverCode      String?     @db.VarChar(255)
  receiver          User?       @relation(fields: [receiverCode], references: [username], name: "ReceiverRelation")
  docstatusId       Int?
  docstatus         DocStatus?  @relation(fields: [docstatusId], references: [id])
  dateline          DateTime?
  description       String?     @db.Text
  departmentactive  Int?
  divisionactive    Int?
  officeactive      Int?
  docdtlog_original String?     @db.VarChar(255)
  docdtlog_file     String?     @db.VarChar(255)
  docdtlog_type     String?     @db.VarChar(255)
  docdtlog_size     Int?
  createdAt         DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime    @updatedAt @db.Timestamptz(0)
}

model DocdtLog {
  id                Int         @id @default(autoincrement())
  docdtId           Int
  docdirector       DocDirector @relation(fields: [docdtId], references: [id])
  assignerCode      String?     @db.VarChar(255)
  assigner          User?       @relation(fields: [assignerCode], references: [username], name: "AssignerRelation")
  receiverCode      String?     @db.VarChar(255)
  receiver          User?       @relation(fields: [receiverCode], references: [username], name: "ReceiverRelation")
  rankId            Int?
  rank              Rank?       @relation(fields: [rankId], references: [id])
  roleId            Int?
  role              Role?       @relation(fields: [roleId], references: [id])
  positionId        Int?
  position          Position?   @relation(fields: [positionId], references: [id])
  departmentId      Int?
  department        Department? @relation(fields: [departmentId], references: [id])
  divisionId        Int?
  division          Division?   @relation(fields: [divisionId], references: [id])
  officeId          Int?
  office            Office?     @relation(fields: [officeId], references: [id])
  unitId            Int?
  unit              Unit?       @relation(fields: [unitId], references: [id])
  docstatusId       Int?
  docstatus         DocStatus?  @relation(fields: [docstatusId], references: [id])
  dateline          DateTime?
  description       String?     @db.Text
  direction         String?     @db.VarChar(255)
  departmentactive  Int?
  divisionactive    Int?
  officeactive      Int?
  docdtlog_original String?     @db.VarChar(255)
  docdtlog_file     String?     @db.VarChar(255)
  docdtlog_type     String?     @db.VarChar(255)
  docdtlog_size     Int?
  createdAt         DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt         DateTime    @updatedAt @db.Timestamptz(0)
}

model DocType {
  id           Int           @id @default(autoincrement())
  doctype_name String        @db.VarChar(255)
  dtype        String?
  actionMax    Int?
  followMax    Int?
  docexternals DocExternal[]
  docinternals DocInternal[]
  docdirectors DocDirector[]
}

model Priority {
  id            Int           @id @default(autoincrement())
  priority_name String        @db.VarChar(255)
  priority_code String?       @db.VarChar(50)
  docexternals  DocExternal[]
  docinternals  DocInternal[]
  docdirectors  DocDirector[]
}

model DocStatus {
  id             Int             @id @default(autoincrement())
  docstatus_name String          @db.VarChar(255)
  docexlogs      DocexLog[]
  docextrackings DocexTracking[]
  docinlogs      DocinLog[]
  docintrackings DocinTracking[]
  docdtlogs      DocdtLog[]
  docdttrackings DocdtTracking[]
}

model BelongTo {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  outsiders Outsider[]
}

model Outsider {
  id           Int           @id @default(autoincrement())
  belongId     Int?
  belongto     BelongTo?     @relation(fields: [belongId], references: [id])
  name         String?       @db.VarChar(255)
  docexternals DocExternal[]
}
